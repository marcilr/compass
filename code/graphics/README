README
Created Sun Aug 13 18:04:45 AKDT 2017
Copyright (C) 2017 by Raymond E. Marcil <marcilr@gmail.com>


Filelist
========
pics/
  Pictures

pdf/
  Portable Document Files

bresenham.html
  Graphics Routines - Bresenham's Line and Circle Algorithms
  In addition to routines for setting individual pixels, and bitmaps to the display I also
  needed routines to write lines and circles to the display for the compass needle.  A little
  research revealed that one of the best methods to use is Bresenham's line-drawing algorithm.
  "Brensenham's line-drawing algorithm (and its derivatives) is one of the most commonly used
  algorithms today for describing a line on a raster device.  The algorithm was first published
  in Bresenham's 1965 article Algorithm for Computer Control of a Digital Plotter It is now
  widely used in graphics and electronic printing systems.

bres.txt
  Bresenham's Line and Circle Algorithms <B3>
  Written for the PC-GPE by Mark Feldman
  e-mail address : u914097@student.canberra.edu.au
  myndale@cairo.anu.edu.au

  NOTE: Replaced unrecognized formatting codes in nano with "-" and "|".

index.html
  Graphics Routines
  This section contains all the algorithms, assembly code, and reasoning behind
  the graphics routines for the digital compass display.  Given that the primary
  objective of the digital compass is to display a real-time representation of a
  compass bearing this is an area where I dedicated a lot of development time.
  o Setting and Clearing pixels
  o Bresenham's Line & Circle Algorithms
  o Sprites and Bitmaps
  o 2D Point Rotation
  o Drawing the Needle

lcd_faq.html
  LCD Frequently Asked Questions
  Compiled by: BRUCK SCOTT (sbruck@harmony2.erl.mei.co.jp)
  Liquid Crystal Display (FAQ) Frequently Asked Question
  Fundamental Liquid Crystal Display Technology: a multi-part introduction
  for the basic understanding of Liquid Crystal Displays
  Version 1.00 August 18, 1993 By Scott M. Bruck
  This FAQ should be printed in 9 POINT MONACO FONT

needledraw.html
  Graphics Routines - Drawing the Needle
  With all the graphics primitives (putpixel, line, circle, sprite, etc.) written 
  the next step was to draw the actual compass needle.  A lot of different methods
  presented themselves for drawing the needle to the display. My first idea was to
  create a bitmap of the compass needle then rotate all the individual points in
  the bitmap to the correct orientation then write the new bitmap to the screen.
  Given that the current needle is 47 pixels high and 13 pixels wide this would
  mean 47x23=1081 rotation calculations each time the compass needle is drawn.
  I decided this was too computationally expensive so I looked for a more efficient
  way to draw the needle. 

pixels.html
  Graphics Routines - Setting and Clearing Pixels
  The most basic graphic primitive is the ability to set or clear an individual
  pixel given an (x,y) coordinate.  I'm using a 64 x 100 Densitron LM4064 display.
  This display is boken up into eight pages numbered 0-7.  Each page being 8-bits
  wide. There are one hundred 1-bit wide columns per page numbered 131-31.  Note
  that the 0-7 page and 31-131 column numbering come from the how the SED1560
  graphics controller is hardwired to the LCD (Liquid Crystal Display).  This may
  sound confusing but it really doesn't matter how the graphics controller
  references the LCD so long as appropriate (x,y) coordinate mapping takes place.
  I decided to conveinently map the origin (0,0) to the lower left hand corner of
  the screen.  Both the pset (pixel set) and pclr (pixel clear) routines map (x,y)
  coordinates to the screen coordinates.  I though of making an independent
  function to do this, but in the name of speed I built the mapping code right into
  pset and pclr.

rpt.html
sprites.html
